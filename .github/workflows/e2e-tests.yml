name: E2E Tests

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_pattern:
        description: 'Test pattern to run (optional)'
        required: false
        default: ''

env:
  GO_VERSION: '1.24'

jobs:
  e2e-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install cloudflared
      run: |
        wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
        sudo dpkg -i cloudflared-linux-amd64.deb

    - name: Create test configuration
      run: |
        mkdir -p $HOME/.tunnelman
        cat > $HOME/.tunnelman/config.json << EOF
        {
          "cloudflare_api_key": "${{ secrets.CLOUDFLARE_API_TOKEN }}",
          "auto_refresh_seconds": 30,
          "log_level": "info"
        }
        EOF
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

    - name: Install dependencies
      run: make deps

    - name: Build application
      run: make build

    - name: Run E2E tests
      run: |
        if [ -n "${{ github.event.inputs.test_pattern }}" ]; then
          E2E_VERBOSE=2 ./scripts/run_e2e_tests.sh "${{ github.event.inputs.test_pattern }}"
        else
          make e2e-test-verbose
        fi
      env:
        E2E_TIMEOUT: 15m

    - name: Upload test logs
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: e2e-test-logs
        path: |
          *.log
          /tmp/tunnelman-*.log
        retention-days: 7

  lint-and-format:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install dependencies
      run: make deps

    - name: Run linter
      run: make lint

    - name: Check formatting
      run: |
        make fmt
        if [ -n "$(git diff --name-only)" ]; then
          echo "Code is not properly formatted. Please run 'make fmt'"
          git diff
          exit 1
        fi

    - name: Run go vet
      run: make vet